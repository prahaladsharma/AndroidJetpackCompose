ðŸ“¦ 1. Memory Considerations:--
* LazyColumn, LazyRow, and LazyGrid use lazy loading â†’ only visible items are composed.
* Efficient for large lists, saving CPU & memory.
* Unlike Column, Row, or Box which render everything immediately, Lazy variants improve performance.


2. Tips:--
* Use remember or rememberSaveable to cache UI state.
* Avoid heavy recompositions by using key.


ðŸ§± 3. SOLID Principles in List/Grid
| Principle                     | Implementation                                                                                            |
| ----------------------------- | --------------------------------------------------------------------------------------------------------- |
| **S â€“ Single Responsibility** | Separate UI items from data logic using `ViewModel`. Each composable has a focused purpose.               |
| **O â€“ Open/Closed**           | Components should allow extension via parameters (e.g., click listeners) without modifying existing code. |
| **L â€“ Liskov Substitution**   | Reusable item composables can be replaced with alternate views without affecting list behavior.           |
| **I â€“ Interface Segregation** | Define minimal interfaces for click handling or item selection.                                           |
| **D â€“ Dependency Inversion**  | Inject list data from the ViewModel using `StateFlow` or `LiveData`.                                      |


ðŸ§¬ 4. Singleton Usage
* Use Singleton only when your data is globally shared (e.g., user session, settings).
    object ItemRepository {
        fun getItems(): List<String> = listOf("One", "Two", "Three")
    }
* Avoid singletons in view logic or UI state â€” prefer DI (e.g., Hilt).


ðŸ§  5. Performance Tips
* Prefer LazyColumn for large lists.
* Use Modifier.clipToBounds() to reduce overdraw.
* Use key() inside items() for stable recomposition.
* Avoid recomposing the whole list when only one item changes â€” manage states properly.


ðŸ“‹ 6. Use Case Examples
| Use Case             | Widget                              |
| -------------------- | ----------------------------------- |
| Chat App             | `LazyColumn` with reverse layout    |
| Media Gallery        | `LazyVerticalGrid` for thumbnails   |
| Form Fields          | Vertical `LazyColumn`               |
| Horizontal Scrolling | `LazyRow` for banners or categories |

ðŸ“Œ Summary
âœ… Use LazyColumn/LazyGrid for performance.
âœ… Apply SOLID for clean architecture.
âœ… Avoid singleton for UI logic.
âœ… Consider memory-efficient layouts.
âœ… Use Flow/State for dynamic updates.

